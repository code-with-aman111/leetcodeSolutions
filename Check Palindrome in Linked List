class Solution {
public:
    void reverse(Node*& head) {
        Node* prev = nullptr;
        Node* next=nullptr;
        Node* curr = head;
        while (curr != nullptr) {
           next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
    }

    bool isPalindrome(Node* head) {
        if (head == nullptr || head->next == nullptr) {
            return true;
        }

        Node* slow = head;
        Node* fast = head;
        while (fast->next != nullptr && fast->next->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }

        Node* secondHalf = slow->next;
        slow->next = nullptr;
        reverse(secondHalf);

        Node* firstHalf = head;
        while (firstHalf != nullptr && secondHalf != nullptr) {
            if (firstHalf->data != secondHalf->data) {
                return false;
            }
            firstHalf = firstHalf->next;
            secondHalf = secondHalf->next;
        }

        return true;
    }
};
