#include <iostream>

class CircularQueue {
private:
    int *arr;
    int rear;
    int front;
    int size;

public:
    CircularQueue(int n) {
        size = n + 1; // We add 1 to avoid confusion between full and empty condition
        arr = new int[size];
        rear = -1;
        front = -1;
    }

    bool enqueue(int value) {
        if ((front == 0 && rear == size - 1) || (rear == (front - 1) % (size - 1))) {
            // Queue is full
            return false;
        } else if (front == -1) {
            // Insert first element
            rear = front = 0;
            arr[rear] = value;
        } else if (rear == size - 1 && front != 0) {
            // Insert at the beginning when rear reaches end
            rear = 0;
            arr[rear] = value;
        } else {
            // Normal case, increment rear and insert
            rear = (rear + 1) % size;
            arr[rear] = value;
        }
        return true;
    }

    int dequeue() {
        if (front == -1) {
            // Queue is empty
            return -1;
        }

        int ans = arr[front];
        arr[front] = -1;

        if (front == rear) {
            // Reset front and rear when queue becomes empty
            front = rear = -1;
        } else {
            // Move front to the next position
            front = (front + 1) % size;
        }

        return ans;
    }

    ~CircularQueue() {
        delete[] arr; // Deallocate memory to prevent memory leak
    }
};
