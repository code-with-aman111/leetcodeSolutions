//{ Driver Code Starts
#include <bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends





class Solution
{
public:
    vector<int> spirallyTraverse(vector<vector<int>> matrix, int r, int c)
    {
        vector<int> ans;
        int sr = 0;
        int sc = 0;
        int er = r - 1; // Rename 're' to 'er' for clarity
        int ec = c - 1; // Rename 'ce' to 'ec' for clarity
        int total = r * c;
        int start = 0;
        while (start < total)
        {
            // Traverse top row from left to right
            for (int i = sc; i <= ec && start < total; i++)
            {
                ans.push_back(matrix[sr][i]);
                start++;
            }
            sr++;

            // Traverse right column from top to bottom
            for (int i = sr; i <= er && start < total; i++)
            {
                ans.push_back(matrix[i][ec]);
                start++;
            }
            ec--;

            // Traverse bottom row from right to left
            for (int i = ec; i >= sc && start < total; i--)
            {
                ans.push_back(matrix[er][i]);
                start++;
            }
            er--;

            // Traverse left column from bottom to top
            for (int i = er; i >= sr && start < total; i--)
            {
                ans.push_back(matrix[i][sc]);
                start++;
            }
            sc++;
        }
        return ans;
    }
};





//{ Driver Code Starts.
int main() {
    int t;
    cin>>t;
    
    while(t--) 
    {
        int r,c;
        cin>>r>>c;
        vector<vector<int> > matrix(r); 

        for(int i=0; i<r; i++)
        {
            matrix[i].assign(c, 0);
            for( int j=0; j<c; j++)
            {
                cin>>matrix[i][j];
            }
        }

        Solution ob;
        vector<int> result = ob.spirallyTraverse(matrix, r, c);
        for (int i = 0; i < result.size(); ++i)
                cout<<result[i]<<" ";
        cout<<endl;
    }
    return 0;
}
// } Driver Code Ends
